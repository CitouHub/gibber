name: Release

env:
  API_PROJECT_NAME: gibbr.API
  WA_PROJECT_NAME: gibbr.Web
  API_NAME: as-api-gibbr
  WA_NAME: as-wa-gibbr
  DOTNET_VERSION: '6.0'
  DB_MASTER_PATH: gibbr.Data/Master

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  unit-test:
    runs-on: ubuntu-latest
    name: Unit Testing
    steps:
      - uses: actions/checkout@v2.1.0
      - run: dotnet test
          
  build-web:
    runs-on: ubuntu-latest
    needs: unit-test
    name: Build web

    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build ${{env.WA_PROJECT_NAME}}
        run: dotnet build ${{env.WA_PROJECT_NAME}} --configuration Release

      - name: Publish ${{env.WA_PROJECT_NAME}}
        run: dotnet publish ${{env.WA_PROJECT_NAME}} -c Release -o ${{env.DOTNET_ROOT}}/${{env.WA_PROJECT_NAME}}

      - name: Upload ${{env.WA_PROJECT_NAME}}
        uses: actions/upload-artifact@v3
        with:
          name: ${{env.WA_PROJECT_NAME}}
          path: ${{env.DOTNET_ROOT}}/${{env.WA_PROJECT_NAME}}
          
  build-api:
    runs-on: ubuntu-latest
    needs: unit-test
    name: Build API

    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build ${{env.API_PROJECT_NAME}}
        run: dotnet build ${{env.API_PROJECT_NAME}} --configuration Release

      - name: Publish ${{env.API_PROJECT_NAME}}
        run: dotnet publish ${{env.API_PROJECT_NAME}} -c Release -o ${{env.DOTNET_ROOT}}/${{env.API_PROJECT_NAME}}

      - name: Upload ${{env.API_PROJECT_NAME}}
        uses: actions/upload-artifact@v3
        with:
          name: ${{env.API_PROJECT_NAME}}
          path: ${{env.DOTNET_ROOT}}/${{env.API_PROJECT_NAME}}
          
  database-update:
    runs-on: windows-latest
    needs: build-api
    name: Database update

    steps:
      - uses: actions/checkout@v3
      - name: DBMaster_Landing.sql
        uses: Azure/sql-action@v1.2
        with:
          connection-string: ${{â€¯secrets.AZURE_SQL_CONNECTION_STRING }}
          sql-file: ${{ env.DB_MASTER_PATH }}/DBMaster_Landing.sql

  deploy-web:
    runs-on: ubuntu-latest
    needs: build-web
    name: Deploy web
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download ${{env.WA_PROJECT_NAME}}
        uses: actions/download-artifact@v3
        with:
          name: ${{env.WA_PROJECT_NAME}}

      - name: Deploy to Azure App service ${{ env.WA_NAME }}
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WA_NAME }}
          publish-profile: ${{ secrets.AZURE_WA_PUBLISH_PROFILE }}
          package: .
          
  deploy-api:
    runs-on: ubuntu-latest
    needs: database-update
    name: Deploy API
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download ${{env.API_PROJECT_NAME}}
        uses: actions/download-artifact@v3
        with:
          name: ${{env.API_PROJECT_NAME}}

      - name: Deploy to Azure App service ${{ env.API_NAME }}
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.API_NAME }}
          publish-profile: ${{ secrets.AZURE_API_PUBLISH_PROFILE }}
          package: .
